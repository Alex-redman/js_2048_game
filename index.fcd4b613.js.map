{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState){\n        this.board = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    renderBoard() {\n        const cells = document.querySelectorAll(\".field-cell\");\n        const flattenedBoard = this.board.flat();\n        cells.forEach((cell, index)=>{\n            const value = flattenedBoard[index];\n            cell.textContent = value === 0 ? \"\" : value;\n            if (value > 0) cell.classList.add(`field-cell--${value}`);\n            else cell.classList = \"field-cell\";\n        });\n    }\n    canMove() {\n        for(let row = 0; row < this.board.length; row++)for(let col = 0; col < this.board[row].length; col++){\n            if (this.board[row][col] === 0) return true;\n            if (col > 0 && this.board[row][col] === this.board[row][col - 1]) return true;\n            if (col < this.board[row].length - 1 && this.board[row][col] === this.board[row][col + 1]) return true;\n            if (row > 0 && this.board[row][col] === this.board[row - 1][col]) return true;\n            if (row < this.board.length - 1 && this.board[row][col] === this.board[row + 1][col]) return true;\n        }\n        this.lose();\n        return false;\n    }\n    moveLeft() {\n        if (!this.canMove()) return;\n        const copyBoard = this.board.map((row)=>row.slice());\n        for(let row = 0; row < this.board.length; row++){\n            const compacted = this.board[row].filter((cell)=>cell !== 0);\n            for(let i = 0; i < compacted.length - 1; i++)if (compacted[i] === compacted[i + 1]) {\n                compacted[i] *= 2;\n                this.score += compacted[i];\n                compacted[i + 1] = 0;\n            }\n            const newRow = compacted.filter((cell)=>cell !== 0);\n            while(newRow.length < 4)newRow.push(0);\n            this.board[row] = newRow;\n            if (newRow.includes(2048)) {\n                this.status = \"win\";\n                this.displayWinMessage();\n                return;\n            }\n        }\n        if (!this.boardsAreEqual(copyBoard, this.board)) this.addRandomTile();\n        this.updateScore();\n        this.renderBoard();\n    }\n    moveRight() {\n        if (!this.canMove()) return;\n        const copyBoard = this.board.map((row)=>row.slice());\n        for(let row = 0; row < this.board.length; row++){\n            const compacted = this.board[row].filter((cell)=>cell !== 0).reverse();\n            for(let i = 0; i < compacted.length - 1; i++)if (compacted[i] === compacted[i + 1]) {\n                compacted[i] *= 2;\n                this.score += compacted[i];\n                compacted[i + 1] = 0;\n            }\n            const newRow = compacted.filter((cell)=>cell !== 0);\n            while(newRow.length < 4)newRow.push(0);\n            this.board[row] = newRow.reverse();\n            if (newRow.includes(2048)) {\n                this.status = \"win\";\n                this.displayWinMessage();\n                return;\n            }\n        }\n        if (!this.boardsAreEqual(copyBoard, this.board)) this.addRandomTile();\n        this.updateScore();\n        this.renderBoard();\n    }\n    moveUp() {\n        if (!this.canMove()) return;\n        const copyBoard = this.board.map((row)=>row.slice());\n        for(let col = 0; col < this.board[0].length; col++){\n            const column = [];\n            for(let row = 0; row < this.board.length; row++)column.push(this.board[row][col]);\n            const compacted = column.filter((cell)=>cell !== 0);\n            for(let i = 0; i < compacted.length - 1; i++)if (compacted[i] === compacted[i + 1]) {\n                compacted[i] *= 2;\n                this.score += compacted[i];\n                compacted[i + 1] = 0;\n            }\n            const newColumn = compacted.filter((cell)=>cell !== 0);\n            while(newColumn.length < 4)newColumn.push(0);\n            for(let row = 0; row < this.board.length; row++)this.board[row][col] = newColumn[row];\n            if (newColumn.includes(2048)) {\n                this.status = \"win\";\n                this.displayWinMessage();\n                return;\n            }\n        }\n        if (!this.boardsAreEqual(copyBoard, this.board)) this.addRandomTile();\n        this.updateScore();\n        this.renderBoard();\n    }\n    moveDown() {\n        if (!this.canMove()) return;\n        const copyBoard = this.board.map((row)=>row.slice());\n        for(let col = 0; col < this.board[0].length; col++){\n            const column = [];\n            for(let row = 0; row < this.board.length; row++)column.push(this.board[row][col]);\n            column.reverse();\n            const compacted = column.filter((cell)=>cell !== 0);\n            for(let i = 0; i < compacted.length - 1; i++)if (compacted[i] === compacted[i + 1]) {\n                compacted[i] *= 2;\n                this.score += compacted[i];\n                compacted[i + 1] = 0;\n            }\n            const newColumn = compacted.filter((cell)=>cell !== 0);\n            while(newColumn.length < 4)newColumn.push(0);\n            newColumn.reverse();\n            for(let row = 0; row < this.board.length; row++)this.board[row][col] = newColumn[row];\n            if (newColumn.includes(2048)) {\n                this.status = \"win\";\n                this.displayWinMessage();\n                return;\n            }\n        }\n        if (!this.boardsAreEqual(copyBoard, this.board)) this.addRandomTile();\n        this.updateScore();\n        this.renderBoard();\n    }\n    boardsAreEqual(board1, board2) {\n        if (board1.length !== board2.length) return false;\n        for(let row = 0; row < board1.length; row++)for(let col = 0; col < board1[row].length; col++){\n            if (board1[row][col] !== board2[row][col]) return false;\n        }\n        return true;\n    }\n    getScore() {\n        return this.score;\n    }\n    updateScore() {\n        const scoreElement = document.querySelector(\".game-score\");\n        scoreElement.textContent = this.score;\n    }\n    getState() {\n        return {\n            board: this.board,\n            score: this.score,\n            status: this.status\n        };\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n        this.updateScore();\n        this.renderBoard();\n    }\n    resetBoard() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n    }\n    addRandomTile() {\n        const emptyCell = [];\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCell.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCell.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyCell.length);\n            const { row: row, col: col } = emptyCell[randomIndex];\n            const newTile = Math.random() < 0.9 ? 2 : 4;\n            this.board[row][col] = newTile;\n            this.score += newTile;\n        }\n    }\n    restart() {\n        this.status = \"idle\";\n        this.resetBoard();\n        this.score = 0;\n        this.updateScore();\n        this.renderBoard();\n    }\n    lose() {\n        this.status = \"lose\";\n        document.querySelector(\".message-restart\").classList.add(\"hidden\");\n        document.querySelector(\".message-start\").classList.add(\"hidden\");\n        document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n    }\n    displayWinMessage() {\n        const winMessage = document.querySelector(\".message-win\");\n        document.querySelector(\".message-restart\").classList.add(\"hidden\");\n        document.querySelector(\".message-start\").classList.add(\"hidden\");\n        winMessage.classList.remove(\"hidden\");\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\nwindow.Game = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\ndocument.addEventListener(\"keydown\", (even)=>{\n    switch(even.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n});\nconst $09e991522ca7e64e$var$buttonStart = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageRestart = document.querySelector(\".message-restart\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\n$09e991522ca7e64e$var$buttonStart.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$buttonStart.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$buttonStart.textContent = \"Restart\";\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$buttonStart.classList.remove(\"start\");\n        $09e991522ca7e64e$var$buttonStart.classList.add(\"restart\");\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageRestart.classList.remove(\"hidden\");\n    } else {\n        $09e991522ca7e64e$var$buttonStart.textContent = \"Start\";\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$buttonStart.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$buttonStart.classList.add(\"start\");\n        $09e991522ca7e64e$var$messageRestart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n    }\n});\n\n\n//# sourceMappingURL=index.fcd4b613.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ndocument.addEventListener('keydown', (even) => {\n  switch (even.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n});\n\nconst buttonStart = document.querySelector('.button.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageRestart = document.querySelector('.message-restart');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nbuttonStart.addEventListener('click', () => {\n  if (buttonStart.classList.contains('start')) {\n    buttonStart.textContent = 'Restart';\n    game.start();\n    buttonStart.classList.remove('start');\n    buttonStart.classList.add('restart');\n    messageStart.classList.add('hidden');\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n    messageRestart.classList.remove('hidden');\n  } else {\n    buttonStart.textContent = 'Start';\n    game.restart();\n    buttonStart.classList.remove('restart');\n    buttonStart.classList.add('start');\n    messageRestart.classList.add('hidden');\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n    messageStart.classList.remove('hidden');\n  }\n});\n","'use strict';\n\nclass Game {\n  constructor(initialState) {\n    this.board = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  renderBoard() {\n    const cells = document.querySelectorAll('.field-cell');\n    const flattenedBoard = this.board.flat();\n\n    cells.forEach((cell, index) => {\n      const value = flattenedBoard[index];\n\n      cell.textContent = value === 0 ? '' : value;\n\n      if (value > 0) {\n        cell.classList.add(`field-cell--${value}`);\n      } else {\n        cell.classList = 'field-cell';\n      }\n    });\n  }\n\n  canMove() {\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] === 0) {\n          return true;\n        }\n\n        if (col > 0 && this.board[row][col] === this.board[row][col - 1]) {\n          return true;\n        }\n\n        if (\n          col < this.board[row].length - 1 &&\n          this.board[row][col] === this.board[row][col + 1]\n        ) {\n          return true;\n        }\n\n        if (row > 0 && this.board[row][col] === this.board[row - 1][col]) {\n          return true;\n        }\n\n        if (\n          row < this.board.length - 1 &&\n          this.board[row][col] === this.board[row + 1][col]\n        ) {\n          return true;\n        }\n      }\n    }\n    this.lose();\n\n    return false;\n  }\n\n  moveLeft() {\n    if (!this.canMove()) {\n      return;\n    }\n\n    const copyBoard = this.board.map((row) => row.slice());\n\n    for (let row = 0; row < this.board.length; row++) {\n      const compacted = this.board[row].filter((cell) => cell !== 0);\n\n      for (let i = 0; i < compacted.length - 1; i++) {\n        if (compacted[i] === compacted[i + 1]) {\n          compacted[i] *= 2;\n          this.score += compacted[i];\n          compacted[i + 1] = 0;\n        }\n      }\n\n      const newRow = compacted.filter((cell) => cell !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      this.board[row] = newRow;\n\n      if (newRow.includes(2048)) {\n        this.status = 'win';\n        this.displayWinMessage();\n\n        return;\n      }\n    }\n\n    if (!this.boardsAreEqual(copyBoard, this.board)) {\n      this.addRandomTile();\n    }\n\n    this.updateScore();\n    this.renderBoard();\n  }\n\n  moveRight() {\n    if (!this.canMove()) {\n      return;\n    }\n\n    const copyBoard = this.board.map((row) => row.slice());\n\n    for (let row = 0; row < this.board.length; row++) {\n      const compacted = this.board[row].filter((cell) => cell !== 0).reverse();\n\n      for (let i = 0; i < compacted.length - 1; i++) {\n        if (compacted[i] === compacted[i + 1]) {\n          compacted[i] *= 2;\n          this.score += compacted[i];\n          compacted[i + 1] = 0;\n        }\n      }\n\n      const newRow = compacted.filter((cell) => cell !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      this.board[row] = newRow.reverse();\n\n      if (newRow.includes(2048)) {\n        this.status = 'win';\n        this.displayWinMessage();\n\n        return;\n      }\n    }\n\n    if (!this.boardsAreEqual(copyBoard, this.board)) {\n      this.addRandomTile();\n    }\n\n    this.updateScore();\n    this.renderBoard();\n  }\n\n  moveUp() {\n    if (!this.canMove()) {\n      return;\n    }\n\n    const copyBoard = this.board.map((row) => row.slice());\n\n    for (let col = 0; col < this.board[0].length; col++) {\n      const column = [];\n\n      for (let row = 0; row < this.board.length; row++) {\n        column.push(this.board[row][col]);\n      }\n\n      const compacted = column.filter((cell) => cell !== 0);\n\n      for (let i = 0; i < compacted.length - 1; i++) {\n        if (compacted[i] === compacted[i + 1]) {\n          compacted[i] *= 2;\n          this.score += compacted[i];\n          compacted[i + 1] = 0;\n        }\n      }\n\n      const newColumn = compacted.filter((cell) => cell !== 0);\n\n      while (newColumn.length < 4) {\n        newColumn.push(0);\n      }\n\n      for (let row = 0; row < this.board.length; row++) {\n        this.board[row][col] = newColumn[row];\n      }\n\n      if (newColumn.includes(2048)) {\n        this.status = 'win';\n        this.displayWinMessage();\n\n        return;\n      }\n    }\n\n    if (!this.boardsAreEqual(copyBoard, this.board)) {\n      this.addRandomTile();\n    }\n\n    this.updateScore();\n    this.renderBoard();\n  }\n\n  moveDown() {\n    if (!this.canMove()) {\n      return;\n    }\n\n    const copyBoard = this.board.map((row) => row.slice());\n\n    for (let col = 0; col < this.board[0].length; col++) {\n      const column = [];\n\n      for (let row = 0; row < this.board.length; row++) {\n        column.push(this.board[row][col]);\n      }\n\n      column.reverse();\n\n      const compacted = column.filter((cell) => cell !== 0);\n\n      for (let i = 0; i < compacted.length - 1; i++) {\n        if (compacted[i] === compacted[i + 1]) {\n          compacted[i] *= 2;\n          this.score += compacted[i];\n          compacted[i + 1] = 0;\n        }\n      }\n\n      const newColumn = compacted.filter((cell) => cell !== 0);\n\n      while (newColumn.length < 4) {\n        newColumn.push(0);\n      }\n\n      newColumn.reverse();\n\n      for (let row = 0; row < this.board.length; row++) {\n        this.board[row][col] = newColumn[row];\n      }\n\n      if (newColumn.includes(2048)) {\n        this.status = 'win';\n        this.displayWinMessage();\n\n        return;\n      }\n    }\n\n    if (!this.boardsAreEqual(copyBoard, this.board)) {\n      this.addRandomTile();\n    }\n\n    this.updateScore();\n    this.renderBoard();\n  }\n\n  boardsAreEqual(board1, board2) {\n    if (board1.length !== board2.length) {\n      return false;\n    }\n\n    for (let row = 0; row < board1.length; row++) {\n      for (let col = 0; col < board1[row].length; col++) {\n        if (board1[row][col] !== board2[row][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  updateScore() {\n    const scoreElement = document.querySelector('.game-score');\n\n    scoreElement.textContent = this.score;\n  }\n\n  getState() {\n    return {\n      board: this.board,\n      score: this.score,\n      status: this.status,\n    };\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n    this.updateScore();\n    this.renderBoard();\n  }\n\n  resetBoard() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n  }\n\n  addRandomTile() {\n    const emptyCell = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCell.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCell.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCell.length);\n      const { row, col } = emptyCell[randomIndex];\n      const newTile = Math.random() < 0.9 ? 2 : 4;\n\n      this.board[row][col] = newTile;\n      this.score += newTile;\n    }\n  }\n\n  restart() {\n    this.status = 'idle';\n    this.resetBoard();\n    this.score = 0;\n    this.updateScore();\n    this.renderBoard();\n  }\n\n  lose() {\n    this.status = 'lose';\n    document.querySelector('.message-restart').classList.add('hidden');\n    document.querySelector('.message-start').classList.add('hidden');\n    document.querySelector('.message-lose').classList.remove('hidden');\n  }\n\n  displayWinMessage() {\n    const winMessage = document.querySelector('.message-win');\n\n    document.querySelector('.message-restart').classList.add('hidden');\n    document.querySelector('.message-start').classList.add('hidden');\n    winMessage.classList.remove('hidden');\n  }\n}\n\nmodule.exports = Game;\nwindow.Game = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","constructor","initialState","board","score","status","renderBoard","cells","document","querySelectorAll","flattenedBoard","flat","forEach","cell","index","value","textContent","classList","add","canMove","row","length","col","lose","moveLeft","copyBoard","map","slice","compacted","filter","i","newRow","push","includes","displayWinMessage","boardsAreEqual","addRandomTile","updateScore","moveRight","reverse","moveUp","column","newColumn","moveDown","board1","board2","getScore","scoreElement","querySelector","getState","getStatus","start","resetBoard","emptyCell","randomIndex","Math","floor","random","newTile","restart","remove","winMessage","window","Game","$09e991522ca7e64e$var$game","addEventListener","even","key","$09e991522ca7e64e$var$buttonStart","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageRestart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","contains"],"version":3,"file":"index.fcd4b613.js.map"}